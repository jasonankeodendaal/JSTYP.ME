import React, { useMemo, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAppContext } from '../context/AppContext.tsx';

const PrintOrderView: React.FC = () => {
    const { quoteId } = useParams<{ quoteId: string }>();
    const navigate = useNavigate();
    const { quotes, products, clients, settings, adminUsers } = useAppContext();
    
    const quote = useMemo(() => quotes.find(q => q.id === quoteId), [quotes, quoteId]);
    const client = useMemo(() => clients.find(c => c.id === quote?.clientId), [clients, quote]);
    const admin = useMemo(() => adminUsers.find(a => a.id === quote?.adminId), [adminUsers, quote]);
    
    const pickedProducts = useMemo(() => {
        if (!quote) return [];
        return quote.items.map(item => {
            const product = products.find(p => p.id === item.productId);
            return { ...item, product };
        }).filter(item => item.product);
    }, [quote, products]);

    useEffect(() => {
        try {
            const qr = window.qrcode(0, 'M'); // type 0 (auto), error correction 'M'
            const url = window.location.origin + '/#/'; // Link to home page
            qr.addData(url);
            qr.make();
            const qrContainer = document.getElementById('qrcode-container');
            if (qrContainer) {
                // createImgTag(cellSize, margin)
                qrContainer.innerHTML = qr.createImgTag(3, 4); 
                const img = qrContainer.querySelector('img');
                if(img) {
                    img.style.width = '128px';
                    img.style.height = '128px';
                    img.style.margin = '0 auto';
                }
            }
        } catch (e) {
            console.error("Could not generate QR code:", e);
        }

        const timer = setTimeout(() => window.print(), 1000);
        return () => clearTimeout(timer);
    }, [quote]);

    if (!quote || !client) {
        return <div className="p-8">Quote not found.</div>;
    }

    const adminName = admin ? `${admin.firstName} ${admin.lastName}` : (quote.adminId === 'kiosk_user' ? 'Kiosk' : 'Unknown User');

    return (
        <div className="bg-white text-gray-900 p-8 print:p-0 print:shadow-none">
            <style>{`
                @media print {
                    body { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
                    .no-print { display: none; }
                }
            `}</style>
            
            <header className="flex justify-between items-start pb-6 border-b-2 border-gray-800">
                <div>
                    <h1 className="text-4xl font-bold text-gray-800">Client Quote Inquiry</h1>
                    <p className="text-gray-600">Generated on: {new Date(quote.createdAt).toLocaleDateString()}</p>
                    <p className="text-gray-600">Generated by: {adminName}</p>
                </div>
                <div className="text-center">
                    <img src={settings.logoUrl} alt="Company Logo" className="w-32 h-auto object-contain mx-auto" />
                    <div id="qrcode-container" className="mt-2"></div>
                    <p className="text-xs text-gray-500 mt-1">Scan to view our catalogue</p>
                </div>
            </header>

            <section className="my-8">
                <h2 className="text-xl font-semibold text-gray-800 mb-2">Client Details</h2>
                <div className="bg-gray-100 p-4 rounded-lg text-sm">
                    <p><strong>Company:</strong> {client.companyName}</p>
                    <p><strong>Contact:</strong> {client.contactPerson}</p>
                    <p><strong>Tel:</strong> {client.contactTel}</p>
                    {client.contactEmail && <p><strong>Email:</strong> {client.contactEmail}</p>}
                    {client.vatNumber && <p><strong>VAT No:</strong> {client.vatNumber}</p>}
                    {client.address && <p><strong>Address:</strong> <span className="whitespace-pre-wrap">{client.address}</span></p>}
                </div>
            </section>
            
            <section>
                <h2 className="text-xl font-semibold text-gray-800 mb-4">Quoted Items ({pickedProducts.length})</h2>
                <table className="w-full text-left border-collapse">
                    <thead className="border-b-2 border-gray-800">
                        <tr>
                            <th className="p-2 w-20">Image</th>
                            <th className="p-2">Product Name</th>
                            <th className="p-2">SKU</th>
                            <th className="p-2 text-center w-24">Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        {pickedProducts.map(({ product, quantity }) => (
                            <tr key={product!.id} className="border-b border-gray-200">
                                <td className="p-2">
                                    <img src={product!.images[0]} alt={product!.name} className="w-16 h-16 object-cover rounded-md" />
                                </td>
                                <td className="p-2 font-medium text-gray-800">{product!.name}</td>
                                <td className="p-2 text-gray-600">{product!.sku}</td>
                                <td className="p-2 text-center text-lg font-bold text-gray-800">{quantity}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </section>

            <footer className="mt-12 text-center text-xs text-gray-500 no-print">
                 <p>Printing document... You can close this window after printing is complete.</p>
                 <button onClick={() => navigate('/admin')} className="mt-4 px-4 py-2 bg-gray-200 rounded-md">Back to Dashboard</button>
            </footer>
        </div>
    );
};

export default PrintOrderView;